------------------------------------------------------------

const a: string = 'hello';
const b: String = 'hell'; // String 래퍼 타입

원시래퍼타입은 쓰지 말자

------------------------------------------------------------

type World = 'world' | 'hello';
type Greeting = `hello ${a}`;

const c: Greeting;

------------------------------------------------------------

function rest(a, ...args: string[]) {
  console.log(a, args); // 1, [2, 3]
}

------------------------------------------------------------

enum
=> 변수를 그룹화할 때 사용
=> 컴파일 이후에도 남아는 있음
=> 문자열도 가능

enum EDirection {
  Up,
  Down,
  Left,
  Right
}
const a = EDirection.Up; // 0
const b = EDirection.Up; // 1
const c = EDirection.Up; // 2
const d = EDirection.Up; // 3


// 객체로 직접 구현도 가능
const ODirection = {
  Up: 0,
  Down: 1,
  Left: 2,
  Right: 3,
} as const;

------------------------------------------------------------

keyof는 객체에서 key만 유니온으로 추출
typeof는 객체 인스턴스의 타입 Alias를 추출

const obj = {
  a: 1,
  b: 2
} as const;

type Keys = keyof typeof obj; // 'a' | 'b'
type Values = typeof obj[keyof typeof obj]

------------------------------------------------------------

type A = { a: string };
interface B {
  a: string
}

간단한건 type Alias
객체지향적인 거 하고 싶으면 interface 써라

기능적 차이는 둘다 크지 않은데 표현성이 다르다고 보는게 좋음

인터페이스는 복수 선언 가능, 인터페이스가 확장됨

interface A {
  talk: () => void;
}

interface A {
  eat: () => void;
}

const a: A = { talk(){}, eat(){}  }

------------------------------------------------------------

union (|)
=> 하나만 만족시켜도 OK, 합집합
=> 타입 추론은 모든 경우의 수를 보므로 union 사용시 범위가 넓어짐

function add(x: string | number, y: string | number): string | number { return x + y }
const result: string | number = add(1, 2);


intersection (&)
=> 둘다 만족, 교집합
=> 프리미티브 타입과는 잘 안 쓰임
=> 객체로 하면 프로퍼티를 강제


type Animal = { breath: true };
type Poyuryu = Animal & { breed: true };
type Human = Poyuryu & { think: true };

const zerocho: Human = { breath: true, breed: true, think: true }; // 숨도 쉬고 생각도 해야 인간

------------------------------------------------------------

타입을 값의 집합으로 생각하자
=> 좁은 타입을 큰 타입에 할당 가능
=> any는 전체집합, never는 공집합

type A = string | number; // A가 더 넓은 타입
type B = string;
type C = string & number; // 제일 좁음


=> 객체는 상세할수록 좁다

type A = { name: string }
type B = { age: number }
type C = { name: string, age: number } // 애가 제일 좁은 집합
type C = A & B;

=> 객체 리터럴 바로 삽입시, 잉여 속성 검사도 하게 되므로 중간 변수를 둬서 해결해야 한다.
const c: C = { name: 'zerocho', age: 29, married: false }; // 에러
// 타입 집합 검사는 통과했지만, 객체 리터럴이라 married가 잉여 속성 검사에 걸림...

const temp = { name: 'zerocho', age: 29, married: false };
const c: C = temp; // OK


=> 함수의 집합 체크는 좀더 복잡...


------------------------------------------------------------

void 타입
=> 함수, 메서드 리턴 타입에 지정
=> 매개변수인 함수가 void를 리턴

=> function에서는 명시적 값 리턴을 막음 (명시적 리턴을 안한다)
=> 매개변수랑 메서드는 또 허용 (사용하지 않겠다)

------------------------------------------------------------

declare function forEach(arr: number[], callback: (el: number) => undefined): void
// 함수 타입 선언만 수행해서 타입만 생성
// 다른곳에서 해당 타입으로 구현되어 있다.

------------------------------------------------------------

as가 항상 가능한건 아님 (타입스크립트 시스템적으로 변환 가능한 경우에만)
그걸 억지로 하려고 한다면 아래처럼 수행 (내가 책임진다.)

const b: number = a.talk() as unknown as number

------------------------------------------------------------

as보다는 unknown이 낫다.
any쓰면 타입 추론을 포기, ts 의의 상실
=> unknown은 지금 타입 모르겠다. ({} | undefined | null)
=> 직접 쓰기 전에 타입을 단언해줘야함

const b: unknown = a.talk(); 
(b as A).talk();


=> try-catch의 error타입의 경우 진짜 알 수 없다.

try {}
catch(error) {
  (error as AxiosError)
}

------------------------------------------------------------

class나 interface에 readonly를 넣어서 읽기전용으로 만듦

------------------------------------------------------------

인덱스드 시그니처, 맵드타입

type Keys = 'Human' | 'Mammal' | 'Animal';

type A = { [key: string]: number };
type B = { [key in B]: number };
type C = { [key in B]: B };  

------------------------------------------------------------